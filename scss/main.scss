@use "sass:math";

$game-size: 840px;
$block-qtd: 7;
$block-size: math.div($game-size, $block-qtd);
$bg-color: #25131a;
$red: #da4e38;
$green: #3e744f;
$x: 2;
$y: 2;

* {
	box-sizing: border-box;
}

body {
	background: $bg-color;
	font-family: 'Press Start 2P';
	display: flex;
	align-items: center;
	justify-content: center;
}

input {
	display: none;
}

@mixin sprite($x: 0, $y: 0, $addSprite: true) {
	@if $addSprite {
		background: url(../img/sprite.png) no-repeat;
	}
	
	background-size: auto;
	background-position: unquote('#{-120 * $x}px #{-120 * $y}px');
}

@mixin ui-text() {
	z-index: 1;
	position: absolute;
	bottom: 0;
	right: 0;
	padding: 0.75rem;
	font-size: 1.5rem;
	text-shadow: 3px 3px 0 #000,
	-3px -3px 0 #000,
	3px -3px 0 #000,
	-3px 3px 0 #000,
	3px 0 0 #000,
	0 3px 0 #000,
	-3px 0px 0 #000,
	0px -3px 0 #000;
}

@mixin ui-heart() {
	content: '';
	width: 100%;
	height: 100%;
	left: 0;
	display: flex;
	align-items: center;
	justify-content: center;
	transform: translate(30%, 30%);
	-webkit-backface-visibility: hidden;
	@include sprite-animate(ui_heart, 11, 0, 4, 1s);
	@include ui-text();
	padding: 0;
	pointer-events: none;
}

@mixin ui-sword() {
	content: '';
	width: 100%;
	height: 100%;
	display: flex;
	align-items: flex-end;
	justify-content: center;
	transform: translate(30%, -30%);
	-webkit-backface-visibility: hidden;
	@include sprite-animate(ui_sword, 11, 4, 4, 1s);
	@include ui-text();
	line-height: 1.5;
	padding: 0;
	pointer-events: none;
}

@mixin sprite-animate($name, $sprite-x: 0, $sprite-y: 0, $steps: 0, $time: 0.5s) {
	@include sprite($sprite-x, $sprite-y);
	animation: $name $time steps($steps, end) infinite;
	@keyframes #{$name}{
		0% {
			@include sprite($sprite-x, $sprite-y, false);
		}
		100% {
			@include sprite($sprite-x + $steps, $sprite-y, false);
		}
	}
}

.map {
	width: $game-size;
	height: $game-size;
	margin: 0 auto;
	position: relative;
	@include sprite();
	display: grid;
	grid-template-columns: repeat($block-qtd, 1fr);
	
	> label {
		position: relative;
		width: $block-size;
		height: $block-size;
		pointer-events: none;
		color: #fff;
		
		&:hover {
			background-color: rgba(#fff,.1);
		}
	}
}

.moves {
	--x: 2;
	--y: 2;
	--key: 0;
	counter-set: hp 5 atk 0 key var(--key);
	
	padding: 0;
	list-style: none;
	
	@mixin atk-monster($monster-hp) {
		counter-increment: hp min(#{-$monster-hp}, 0) atk min(#{-$monster-hp}, 0);
	}
	
	@mixin get-sword($sword-power) {
		counter-increment: atk $sword-power;
	}
	
	@mixin get-potion($potion-heal) {
		counter-increment: hp $potion-heal;
	}
	
	// Move 1
	li:nth-child(1) {
		#x3y2:checked ~ & {
			@include atk-monster(2);
		}
		#x2y3:checked ~ & {
			@include atk-monster(3);
		}
	}
	
	// Move 2
	li:nth-child(2) {
		#x4y2:checked ~ & {
			@include get-sword(3);
		}
		#x3y3:checked ~ & {
			counter-increment: hp 3;
		}
		#x2y4:checked ~ & {
			counter-increment: key;
		}
	}
	
	// Move 3
	li:nth-child(3) {
		#x5y2:checked ~ & {
			@include atk-monster(3);
		}
		#x3y4:checked ~ & {
			counter-increment: atk 5;
		}
		#x2y5:checked ~ & {
			counter-increment: hp 6;
		}
	}
	
	// Move 4
	li:nth-child(4) {
		#x5y3:checked ~ & {
			counter-increment: hp 3;
		}
		#x4y4:checked ~ & {
			counter-increment: hp -3;
		}
		#x3y4:checked ~ #x3y5:checked ~ & {
			counter-increment: hp -5;
		}
		#x2y5:checked ~ #x3y5:checked ~ & {
			counter-increment: hp -5;
		}
	}
	
	// Move 5
	li:nth-child(5) {
		#x4y2:checked ~ & {
			//counter-increment: hp -3;
		}
	}
	
	// Move 6
	li:nth-child(6) {
		#x4y2:checked ~ & {
			//counter-increment: hp -3;
		}
	}
	
	// Move 7
	li:nth-child(7) {
		#x4y2:checked ~ & {
			//counter-increment: hp -3;
		}
	}
	
	// Move 8
	li:nth-child(8) {
		#x4y2:checked ~ & {
			//counter-increment: hp -3;
		}
	}
}

.player {
	width: $block-size;
	height: $block-size * 2;
	position: absolute;
	z-index: 2;
	color: #fff;
	pointer-events: none;
	left: calc(#{$block-size} * var(--x) - #{$block-size});
	top: calc(#{$block-size} * var(--y) - #{$block-size} - #{$block-size});
	@include sprite(4, 7);
	animation: player_animation 0.5s steps(4, end) infinite;
	@keyframes player_animation {
		0% {
			@include sprite(4, 7, false);
		}
		100% {
			@include sprite(8, 7, false);
		}
	}
	
	&:before {
		@include ui-heart();
		content: counter(hp);
		height: 50%;
		transform: none;
	}
	
	&:after {
		@include ui-sword();
		content: counter(atk);
		height: 50%;
		transform: none;
	}
}

.wall {
	pointer-events: none !important;
}

.monster1 {
	&:before {
		@include ui-heart();
		content: attr(hp);
	}
	
	span {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		@include sprite-animate(monster1, 0, 9, 4, 0.5s);
	}
	
}

.monster2 {
	&:before {
		@include ui-heart();
		content: attr(hp);
	}
	
	span {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		@include sprite-animate(monster2, 0, 10, 4, 0.5s);
	}
}

.monster3 {
	&:before {
		@include ui-heart();
		content: attr(hp);
	}
	
	span {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 200%;
		height: 200%;
		pointer-events: none;
		@include sprite(4, 9);
		animation: monster3 0.5s steps(1, end) infinite;
		
		@keyframes monster3 {
			0% {
				@include sprite(4, 9, false);
			}
			50% {
				@include sprite(6, 9, false);
			}
			75% {
				@include sprite(8, 9, false);
			}
			100% {
				@include sprite(10, 9, false);
			}
		}
	}
}

.monster4 {
	&:before {
		@include ui-heart();
		content: attr(hp);
	}
	
	span {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		@include sprite-animate(monster4, 0, 11, 4, 0.5s);
	}
}

.monster5 {
	&:before {
		@include ui-heart();
		content: attr(hp);
	}
	
	span {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 200%;
		pointer-events: none;
		@include sprite-animate(monster5, 0, 12, 4, 0.5s);
	}
}

.monster6 {
	&:before {
		@include ui-heart();
		content: attr(hp);
	}
	
	span {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 200%;
		height: 200%;
		pointer-events: none;
		@include sprite(4, 12);
		animation: monster6 0.5s steps(1, end) infinite;
		
		@keyframes monster6 {
			0% {
				@include sprite(4, 12, false);
			}
			50% {
				@include sprite(6, 12, false);
			}
			75% {
				@include sprite(8, 12, false);
			}
			100% {
				@include sprite(10, 12, false);
			}
		}
	}
}

.potion {
	position: relative;
	
	&:before {
		content: '+' attr(hp);
		@include ui-text();
	}
	
	@include sprite-animate(potion, 7, 0, 4);
}

.potion-lg {
	position: relative;
	
	&:before {
		content: '+' attr(hp);
		@include ui-text();
	}
	
	@include sprite-animate(potion_lg, 7, 1, 4);
}

.sword {
	position: relative;
	
	&:after {
		content: '+' attr(atk);
		@include ui-text();
	}
	
	@include sprite-animate(sword, 7, 2, 4);
}

.sword-lg {
	position: relative;
	
	&:after {
		content: '+' attr(atk);
		@include ui-text();
	}
	
	@include sprite-animate(sword_lg, 7, 3, 4);
}

.torch {
	position: relative;
	pointer-events: none !important;
	@include sprite-animate(torch, 7, 5, 4);
}

.key {
	position: relative;
	@include sprite-animate(key, 11, 5, 4);
}

.chest {
	position: relative;
	@include sprite-animate(chest, 7, 6, 4);
}

.victory,
.death {
	position: absolute;
	z-index: 1;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	color: #fff;
	background: $bg-color;
	font-size: 7vw;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	transform: scale(0.75);
	opacity: 0;
	visibility: hidden;
	
	a {
		margin-top: 4rem;
		padding: 1rem 3rem;
		font-size: 1vw;
		color: inherit;
		border-radius: 0.5rem;
		text-decoration: none !important;
		background: lighten($bg-color, 10);
		transition: .3s;
		
		&:hover {
			background: lighten($bg-color, 15);
		}
	}
}

.death span:after {
	content: ']:';
	letter-spacing: -0.3em;
	margin-left: 0.3em;
}

.victory span:after {
	content: '[:';
	letter-spacing: -0.3em;
	margin-left: 0.3em;
}

@mixin trigger-death() {
	& ~ .map {
		opacity: 0;
		transform: scale(0.75);
		transition: .5s;
	}
	
	& ~ .death {
		transform: scale(1);
		opacity: 1;
		visibility: visible;
		transition: .5s .4s;
	}
}

@mixin trigger-victory() {
	& ~ .map {
		opacity: 0;
		transform: scale(0.75);
		transition: .5s;
	}
	
	& ~ .victory {
		transform: scale(1);
		opacity: 1;
		visibility: visible;
		transition: .5s .4s;
	}
}

@for $i from 1 through $block-qtd {
	@for $j from 1 through $block-qtd {
		#x#{$i}y#{$j}:checked {
			& ~ .map {
				--x: #{$i};
				--y: #{$j};
				
				// Enable below
				label[for*='x#{$i}y#{$j + 1}'] {
					pointer-events: all;
					cursor: pointer;
				}
				
				// Enable right
				label[for*='x#{$i + 1}y#{$j}'] {
					pointer-events: all;
					cursor: pointer;
				}
				
				// Disable current
				label[for*='x#{$i}y#{$j}'] {
					opacity: 0;
					pointer-events: none !important;
				}
				
				// Disable top left block
				label[for*='x#{$i - 1}y#{$j - 1}'],
					// Disable top right block
				label[for*='x#{$i + 1}y#{$j - 1}'],
					// Disable down right block
				label[for*='x#{$i + 1}y#{$j + 1}'],
					// Disable down left block
				label[for*='x#{$i - 1}y#{$j + 1}'],
					// Disable left block
				label[for*='x#{$i - 1}y#{$j}'] {
					pointer-events: none;
				}
			}
			
			#x#{$i + 1}y#{$j}:checked ~ .map {
				// Enable right
				@if $i + 1 < $block-qtd - 1 {
					label[for*='x#{$i + 2}y#{$j}'] {
						pointer-events: all;
						cursor: pointer;
					}
				}
			}
		}
	}
}

$hp: 5;
$atk: 0;

@mixin att($hp, $atk) {
	& ~ .map {
		--hp: #{$hp};
		--atk: #{$atk};
	}
}

@mixin att-atk($atk) {
	& ~ .map {
		--atk: #{$atk};
	}
}

@mixin att-hp($hp) {
	& ~ .map {
		--hp: #{$hp};
	}
}

// Moves
/*
// R
#x3y2:checked {
	@include att-hp(2);
	
	// R + R
	& ~ #x4y2:checked {
		@include att-atk(10);
		
		// R + R + R
		& ~ #x5y2:checked {
			@include att-atk(7);
			
			// R + R + R + R + D
	    & ~ #x6y3:checked {
		    @include att-atk(2);
			}
			
			// R + R + R + D
			& ~ #x5y3:checked {
				@include att-hp(5);
				
				// R + R + R + D + R
				& ~ #x6y3:checked {
					@include att-atk(2);
				}
				
				// R + R + R + D + D
				& ~ #x5y4:checked {
					@include att-atk(2);
				}
			}
		}
		
		// R + R + D + R
		& ~ #x5y3:checked {
			@include att-hp(5);
			
			// R + R + D + R + R
			& ~ #x6y3:checked {
				@include att-atk(5);
			}
			
			// R + R + D + R + D
			& ~ #x5y4:checked {
				@include att-atk(5);
			}
		}
		
		// R + R + D + D
		& ~ #x4y4:checked {
			@include att-atk(7);
			
			// R + R + D + D + R
			& ~ #x5y4:checked {
				@include att-atk(2);
			}
			
			// R + R + D + D + D
			& ~ #x4y5:checked {
				@include att-atk(17);
				
				// R + R + D + D + D + D
				& ~ #x4y6:checked {
					@include att-atk(12);
					
					// R + R + D + D + D + D + R
					& ~ #x5y6:checked {
						@include att-atk(0);
					}
				}
			}
		}
	}
	
	// R + D
	& ~ #x3y3:checked {
		@include att-hp(5);
		
		// R + D + R + R
		& ~ #x5y3:checked {
			@include att-hp(8);
			
			// R + D + R + R + R
			& ~ #x6y3:checked {
				@include att-hp(3);
			}
			
			// R + D + R + R + D
			& ~ #x5y4:checked {
				@include att-hp(3);
			}
		}
		
		// R + D + R + D
		& ~ #x4y4:checked {
			@include att-hp(2);
			
			// R + D + R + D + R
			& ~ #x5y4:checked {
				@include trigger-death();
			}
			
			// R + D + R + D + D
			& ~ #x4y5:checked {
				@include att-atk(10);
				
				// R + D + R + D + D + D
				& ~ #x4y6:checked {
					@include att-atk(5);
					
					// R + D + R + D + D + D + R
					& ~ #x5y6:checked {
						@include trigger-death();
					}
				}
			}
		}
	}
	
	// Red Boss
	& ~ #x6y5:checked {
		@include trigger-death();
	}
}
// Stairs
#x6y6:checked {
	@include trigger-victory();
}

*/

/*
// Potions
#x3y3:checked,
#x3y5:checked{
    $hp-multiplier: $hp-multiplier + 3;
    @include att-hp($hp-multiplier);
}
// Large potions
#x5y6:checked{
    $hp-multiplier: $hp-multiplier + 6;
    @include att-hp($hp-multiplier);
}
// Swords
#x4y5:checked,
#x6y5:checked{
    $atk-multiplier: $atk-multiplier + 5;
    @include att-atk($atk-multiplier);
}
// Large swords
#x2y4:checked,
#x5y4:checked{
    $atk-multiplier: $atk-multiplier + 10;
    @include att-atk($atk-multiplier);
}
// Monster 1
#x4y4:checked,
#x3y6:checked{
    $monster-hp: 2;
    $monster-atk: 1;
    $total: $monster-hp + $monster-atk;
    $diff: $atk-multiplier - $total;
    
    @if $diff < 0 {
        $hp-multiplier: $hp-multiplier + $diff;
        @include att-hp($hp-multiplier);
        @include att-atk(0, true);
    } @else{
        @include att-atk($atk-multiplier);
    }
}
// Monster 2
#x6y4:checked,
#x5y5:checked{
    $monster-hp: 3;
    $monster-atk: 2;
    $total: $monster-hp + $monster-atk;
    $diff: $atk-multiplier - $total;
    
    @if $diff < 0 {
        $hp-multiplier: $hp-multiplier + $diff;
        @include att-hp($hp-multiplier);
        @include att-atk(0, true);
    } @else{
        @include att-atk($atk-multiplier);
    }
}
// Monster 3
#x6y3:checked{
    $monster-hp: 6;
    $monster-atk: 6;
    $total: $monster-hp + $monster-atk;
    $diff: $atk-multiplier - $total;
    
    @if $diff < 0 {
        $hp-multiplier: $hp-multiplier + $diff;
        @include att-hp($hp-multiplier);
        @include att-atk(0, true);
    } @else{
        @include att-atk($atk-multiplier);
    }
}
// Monster 4
#x2y3:checked,
#x2y5:checked{
    $monster-hp: 1;
    $monster-atk: 2;
    $total: $monster-hp + $monster-atk;
    $diff: $atk-multiplier - $total;
    
    @if $diff < 0 {
        $hp-multiplier: $hp-multiplier + $diff;
        @include att-hp($hp-multiplier);
        @include att-atk(0, true);
    } @else{
        @include att-atk($atk-multiplier);
    }
}
// Monster 5
#x4y3:checked{
    $monster-hp: 2;
    $monster-atk: 3;
    $total: $monster-hp + $monster-atk;
    $diff: $atk-multiplier - $total;
    
    @if $diff < 0 {
        $hp-multiplier: $hp-multiplier + $diff;
        @include att-hp($hp-multiplier);
        @include att-atk(0, true);
    } @else{
        @include att-atk($atk-multiplier);
    }
}
// Monster 6
#x5y2:checked{
    $monster-hp: 6;
    $monster-atk: 6;
    $total: $monster-hp + $monster-atk;
    $diff: $atk-multiplier - $total;
    
    @if $diff < 0 {
        $hp-multiplier: $hp-multiplier + $diff;
        @include att-hp($hp-multiplier);
        @include att-atk(0, true);
    } @else{
        @include att-atk($atk-multiplier);
    }
}
*/
